{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["APIBASEURL","App","useState","stateList","setStateList","districtList","setDistrictList","centerList","setCenterList","state","setState","district","setDistrict","distRef","useRef","current","loading","setLoading","loadingDist","setLoadingDist","loadingStates","setLoadingStates","moment","format","lastRefreshTime","setlastRefreshTime","timerId","getStates","a","axios","get","then","resp","data","states","length","state_id","catch","e","alert","getDistricts","stateId","districts","district_id","useEffect","clearInterval","getData","setInterval","dateInput","console","log","centers","window","location","reload","className","map","stateItem","onClick","state_name","districtItem","district_name","INTERVAL","center","name","block_name","fee_type","address","pincode","vaccine_fees","vac","vaccine","fee","sessions","session","available_capacity","date","min_age_limit","max_age_limit","available_capacity_dose1","available_capacity_dose2","slots","slot","index","time","seats","session_id","center_id","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c55dfc0a.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nconst APIBASEURL = 'https://cdn-api.co-vin.in/api/v2';\nconst STATELISTENDPOINT = '/admin/location/states';\nconst DISTRICTLISTENDPOINT = '/admin/location/districts/';\nconst KERALANUMBER = '17';\nconst DATABYDISTRICTENDPOINT = '/appointment/sessions/public/calendarByDistrict?&district_id=';\n\nfunction App() {\n  const [stateList, setStateList] = useState([]);\n  const [districtList, setDistrictList] = useState([]);\n  const [centerList, setCenterList] = useState([]);\n  const [state, setState] = useState('');\n  const [district, setDistrict] = useState('');\n  const distRef = useRef(district);\n  distRef.current = district;\n  const [loading, setLoading] = useState(false);\n  const loadingRef = useRef(loading);\n  loadingRef.current = loading;\n  const [loadingDist, setLoadingDist] = useState(false);\n  const [loadingStates, setLoadingStates] = useState(false);\n  // let timerId;\n  const INTERVAL = 10000;\n  const [lastRefreshTime, setlastRefreshTime] = useState(moment().format('LTS'));\n  const timerId = useRef(null);\n  const getStates = async () => {\n    setLoadingStates(true);\n    axios.get(`${APIBASEURL}${STATELISTENDPOINT}`)\n      .then(resp => {\n        setStateList(resp.data.states || []);\n        setLoadingStates(false);\n        if(resp.data.states && resp.data.states.length > 0){\n          setState(resp.data.states[17].state_id);\n        }\n      })\n      .catch(e => {\n        alert(\"Error in getting states:\", e);\n        setLoadingStates(false);\n        // window.location.reload();\n      });\n  }\n  const getDistricts = async (stateId) => {\n    setLoadingDist(true);\n    setDistrictList([]);\n    setCenterList([]);\n    setDistrict('');\n    distRef.current = null;\n    axios.get(`${APIBASEURL}${DISTRICTLISTENDPOINT}${stateId}`)\n      .then(resp => {\n        setDistrictList(resp.data.districts || []);\n        setLoadingDist(false);\n        if(resp.data.districts && resp.data.districts.length > 0){\n          setDistrict(resp.data.districts[0].district_id);\n          distRef.current = resp.data.districts[0].district_id;\n        }\n      })\n      .catch(e => {\n        alert(\"Error in getting districts:\", e);\n        setLoadingDist(false);\n        setState(stateList[17].state_id);\n        // window.location.reload();\n      });\n  }\n  useEffect(() => {\n    getStates();\n    //call api every given interval. starting on mount\n    // timerId.current = setInterval(getData, INTERVAL);\n    return () => clearInterval(timerId.current);\n  }, []);\n  useEffect(() => {\n    // console.log(\"cleared\", timerId.current)\n    if(state){\n      clearInterval(timerId.current);\n      getDistricts(state);  \n    }\n    // timerId.current = setInterval(getData, INTERVAL);\n    // console.log(\"new for next\", timerId.current)\n  }, [state]);\n  useEffect(() => {\n    // console.log(\"cleared\", timerId.current)\n    if(district){\n      clearInterval(timerId.current);\n      getData();\n      timerId.current = setInterval(getData, INTERVAL);  \n    }\n    // console.log(\"new for next\", timerId.current)\n  }, [district]);\n  const getData = async () => {\n    // console.log(\"distRef.current\", distRef.current, \"loadingRef.current\", loadingRef.current, \"timerId.current\", timerId.current)\n    if (distRef.current) {\n      // console.log(\"calling api\")\n      setLoading(true);\n      const dateInput = moment().format('DD-MM-YYYY');\n      axios.get(`${APIBASEURL}${DATABYDISTRICTENDPOINT}${distRef.current}&date=${dateInput}`)\n        .then(resp => {\n          console.log(\"resp.data?.centers\", resp.data?.centers)\n          setCenterList(resp.data?.centers || []);\n          setlastRefreshTime(moment().format('LTS'));\n          setLoading(false);\n        })\n        .catch(e => {\n          alert(\"Error in getting centers:\", e);\n          // window.location.reload();\n          // setCenterList([]);\n          // setDistrict(districtList[0].district_id);\n          // distRef.current = districtList[0].district_id;\n          // setLoading(false);\n          window.location.reload();\n        });\n    }\n    else {\n      console.log(\"skipped api\")\n    }\n  }\n  return (\n    <div className=\"App\">\n      <div className='distList'>\n        {\n          loadingStates === true ? 'Loading...'\n            : <>\n              {\n                stateList.length > 0 ?\n                  <div className=''>\n                    {stateList.map(stateItem => {\n                      return (\n                        <div className={stateItem.state_id === state ? 'chatItem selectedDist' : 'chatItem'} key={stateItem.state_id} onClick={() => setState(stateItem.state_id)}>{stateItem.state_name}</div>\n                      )\n                    })}\n                  </div>\n                  : 'No States available'\n              }\n            </>\n        }\n      </div>\n      <hr />\n      <div className='distList'>\n        {\n          loadingDist === true ? 'Loading...'\n            : <>\n              {\n                districtList.length > 0 ?\n                  <div className=''>\n                    {districtList.map(districtItem => {\n                      return (\n                        <div className={districtItem.district_id === district ? 'chatItem selectedDist' : 'chatItem'} key={districtItem.district_id} onClick={() => setDistrict(districtItem.district_id)}>{districtItem.district_name}</div>\n                      )\n                    })}\n                  </div>\n                  : 'No Districts available'\n              }\n            </>\n        }\n      </div>\n      <div>Auto refreshes in every {INTERVAL / 1000} seconds. Last refresh:{lastRefreshTime}</div>\n      <div className='chatWindow'>\n        {\n          loading === true ? 'Loading...'\n            :\n          centerList.length > 0 ? centerList.map(center => {\n            return (\n              <div key={center.center_id} className='messageInBubble'>\n                <div className='centerTitle'>\n                  <div className='centerName'>{center.name}-{center.block_name}</div>\n                  <div className={center.fee_type === 'Free' ? 'greenText centerFee' : 'redText centerFee'}>{center.fee_type}</div>\n                </div>\n                <div className='centerAddress'>{center.address} - {center.pincode}</div>\n                <div className='feeContainer'>\n                  {\n                    center.vaccine_fees.map(vac => <div className='slotTime'>{`${vac.vaccine} : ₹ ${vac.fee}`}</div>)\n                  }\n                </div>\n                {\n                  center.sessions.length > 0 && center.sessions.map(session => {\n                    return (\n                      <div key={session.session_id} className={session.available_capacity ? 'availableBG sessionContainer' : 'notAvailableBG sessionContainer'}>\n                        <div className='vaccineName'>{loading === true ? 'Refreshing...' : session.vaccine}</div>\n                        <div className='vaccineDate'>{session.date}</div>\n                        <div className='vaccineCapacity'><span>Age limit: {session.min_age_limit || 'NA'} to {session.max_age_limit || 'NA'}</span> <span>Dose1: {session.available_capacity_dose1}</span> <span>Dose2: {session.available_capacity_dose2}</span></div>\n                        <div className='slotContainer'>\n                          {\n                            session.slots.length > 0 && session.slots.map((slot, index) => {\n                              return (\n                                <div key={index} className='slotTime'>{`${slot.time} (${slot.seats} seats)`}</div>\n                              )\n                            })\n                          }\n                        </div>\n                      </div>\n                    )\n                  })\n                }\n              </div>\n            )\n          })\n            : 'No Centers are available for the selected district. Refresh after some time.'\n        }\n      </div>\n      <div>Have suggestions? Please submit at <a href='https://github.com/imismailpe/vaccinapp'>https://github.com/imismailpe/vaccinapp</a></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}