{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["APIBASEURL","App","useState","districtList","setDistrictList","centerList","setCenterList","district","setDistrict","distRef","useRef","current","loading","setLoading","loadingRef","loadingDist","setLoadingDist","moment","format","lastRefreshTime","setlastRefreshTime","timerId","useEffect","axios","get","then","resp","data","districts","length","district_id","catch","e","alert","clearInterval","console","log","getData","setInterval","a","dateInput","centers","className","map","districtItem","onClick","district_name","INTERVAL","center","name","block_name","fee_type","address","pincode","sessions","session","available_capacity","vaccine","date","min_age_limit","max_age_limit","available_capacity_dose1","available_capacity_dose2","slots","slot","index","seats","time","session_id","center_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3887585a.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nconst APIBASEURL = 'https://cdn-api.co-vin.in/api/v2';\nconst DISTRICTLISTENDPOINT = '/admin/location/districts/';\nconst KERALANUMBER = '17';\nconst DATABYDISTRICTENDPOINT = '/appointment/sessions/public/calendarByDistrict?&district_id=';\n\nfunction App() {\n  const [districtList, setDistrictList] = useState([]);\n  const [centerList, setCenterList] = useState([]);\n  const [district, setDistrict] = useState('');\n  const distRef = useRef(district);\n  distRef.current = district;\n  const [loading, setLoading] = useState(false);\n  const loadingRef = useRef(loading);\n  loadingRef.current = loading;\n  const [loadingDist, setLoadingDist] = useState(false);\n  // let timerId;\n  const INTERVAL = 10000;\n  const [lastRefreshTime, setlastRefreshTime] = useState(moment().format('LTS'));\n  const timerId = useRef(null);\n  useEffect(() => {\n    setLoadingDist(true);\n    axios.get(`${APIBASEURL}${DISTRICTLISTENDPOINT}${KERALANUMBER}`)\n      .then(resp => {\n        setDistrictList(resp.data.districts || []);\n        setLoadingDist(false);\n        resp.data.districts && resp.data.districts.length > 0 && setDistrict(resp.data.districts[0].district_id);\n      })\n      .catch(e => {\n        alert(\"error:\", e)\n        setLoadingDist(false);\n      })\n    //call api every given interval. starting on mount\n    // timerId.current = setInterval(getData, INTERVAL);\n    return () => clearInterval(timerId.current);\n  }, []);\n  useEffect(() => {\n    console.log(\"cleared\", timerId.current)\n    clearInterval(timerId.current);\n    getData();\n    timerId.current = setInterval(getData, INTERVAL);\n    console.log(\"new for next\", timerId.current)\n  }, [district]);\n  const getData = async () => {\n    console.log(\"distRef.current\", distRef.current, \"loadingRef.current\", loadingRef.current, \"timerId.current\", timerId.current)\n    if (distRef.current) {\n      console.log(\"calling api\")\n      setLoading(true);\n      const dateInput = moment().format('DD-MM-YYYY');\n      axios.get(`${APIBASEURL}${DATABYDISTRICTENDPOINT}${distRef.current}&date=${dateInput}`)\n        .then(resp => {\n          setCenterList(resp.data.centers);\n          setLoading(false);\n          setlastRefreshTime(moment().format('LTS'));\n        })\n        .catch(e => {\n          alert(\"error:\", e);\n          setLoading(false);\n        })\n    }\n    else {\n      console.log(\"skipped api\")\n    }\n  }\n  return (\n    <div className=\"App\">\n      <div>Select your district to see Covid vaccine slots</div>\n      <div className='distList'>\n        {\n          loadingDist === true ? 'Loading...'\n            : <>\n              {\n                districtList.length > 0 ?\n                  <div className=''>\n                    {districtList.map(districtItem => {\n                      return (\n                        <div className={districtItem.district_id === district ? 'chatItem selectedDist' : 'chatItem'} key={districtItem.district_id} onClick={() => setDistrict(districtItem.district_id)}>{districtItem.district_name}</div>\n                      )\n                    })}\n                  </div>\n                  : 'No Districts available'\n              }\n            </>\n        }\n      </div>\n      <div>Auto refreshes in every {INTERVAL / 1000} seconds. Last refresh:{lastRefreshTime}</div>\n      <div className='chatWindow'>\n        {\n          // loading === true ? 'Loading...'\n          //   :\n          centerList.length > 0 ? centerList.map(center => {\n            return (\n              <div key={center.center_id} className='messageInBubble'>\n                <div className='centerTitle'>\n                  <div className='centerName'>{center.name}-{center.block_name}</div>\n                  <div className={center.fee_type === 'Free' ? 'greenText centerFee' : 'redText centerFee'}>{center.fee_type}</div>\n                </div>\n                <div className='centerAddress'>{center.address} - {center.pincode}</div>\n                {\n                  center.sessions.length > 0 && center.sessions.map(session => {\n                    return (\n                      <div key={session.session_id} className={session.available_capacity ? 'availableBG sessionContainer' : 'notAvailableBG sessionContainer'}>\n                        <div className='vaccineName'>{loading === true ? 'Refreshing...' : session.vaccine}</div>\n                        <div className='vaccineDate'>{session.date}</div>\n                        <div className='vaccineCapacity'>Age limit: {session.min_age_limit || 'NA'} to {session.max_age_limit || 'NA'}, Dose1: {session.available_capacity_dose1}, Dose2: {session.available_capacity_dose2}</div>\n                        <div className='slotContainer'>\n                          {\n                            session.slots.length > 0 && session.slots.map((slot, index) => {\n                              return (\n                                <div key={index} className='slotTime'>{slot.seats} seats at {slot.time}</div>\n                              )\n                            })\n                          }\n                        </div>\n                      </div>\n                    )\n                  })\n                }\n              </div>\n            )\n          })\n            : 'No Centers are available for the selected district. Refresh after some time.'\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}