{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["APIBASEURL","App","useState","districtList","setDistrictList","centerList","setCenterList","district","setDistrict","distRef","useRef","current","loading","setLoading","loadingRef","loadingDist","setLoadingDist","moment","format","lastRefreshTime","setlastRefreshTime","timerId","useEffect","axios","get","then","resp","data","districts","length","district_id","catch","e","alert","clearInterval","console","log","getData","setInterval","a","dateInput","centers","className","map","districtItem","onClick","district_name","INTERVAL","center","name","block_name","fee_type","address","pincode","sessions","session","available_capacity","vaccine","date","min_age_limit","max_age_limit","available_capacity_dose1","available_capacity_dose2","slots","slot","session_id","center_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c7700c9.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nconst APIBASEURL = 'https://cdn-api.co-vin.in/api/v2';\r\nconst DISTRICTLISTENDPOINT = '/admin/location/districts/';\r\nconst KERALANUMBER = '17';\r\nconst DATABYDISTRICTENDPOINT = '/appointment/sessions/public/calendarByDistrict?&district_id=';\r\n\r\nfunction App() {\r\n  const [districtList, setDistrictList] = useState([]);\r\n  const [centerList, setCenterList] = useState([]);\r\n  const [district, setDistrict] = useState('');\r\n  const distRef = useRef(district);\r\n  distRef.current = district;\r\n  const [loading, setLoading] = useState(false);\r\n  const loadingRef = useRef(loading);\r\n  loadingRef.current = loading;\r\n  const [loadingDist, setLoadingDist] = useState(false);\r\n  // let timerId;\r\n  const INTERVAL = 10000;\r\n  const [lastRefreshTime, setlastRefreshTime] = useState(moment().format('LTS'));\r\n  const timerId = useRef(null);\r\n  useEffect(() => {\r\n    setLoadingDist(true);\r\n    axios.get(`${APIBASEURL}${DISTRICTLISTENDPOINT}${KERALANUMBER}`)\r\n      .then(resp => {\r\n        setDistrictList(resp.data.districts || []);\r\n        setLoadingDist(false);\r\n        resp.data.districts && resp.data.districts.length > 0 && setDistrict(resp.data.districts[0].district_id);\r\n      })\r\n      .catch(e => {\r\n        alert(\"error:\", e)\r\n        setLoadingDist(false);\r\n      })\r\n    //call api every given interval. starting on mount\r\n    // timerId.current = setInterval(getData, INTERVAL);\r\n    return () => clearInterval(timerId.current);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(\"cleared\", timerId.current)\r\n    clearInterval(timerId.current);\r\n    getData();\r\n    timerId.current = setInterval(getData, INTERVAL);\r\n    console.log(\"new for next\", timerId.current)\r\n  }, [district]);\r\n  const getData = async () => {\r\n    console.log(\"distRef.current\",distRef.current,\"loadingRef.current\",loadingRef.current,\"timerId.current\", timerId.current)\r\n    if (distRef.current) {\r\n      console.log(\"calling api\")\r\n      setLoading(true);\r\n      const dateInput = moment().format('DD-MM-YYYY');\r\n      axios.get(`${APIBASEURL}${DATABYDISTRICTENDPOINT}${distRef.current}&date=${dateInput}`)\r\n        .then(resp => {\r\n          setCenterList(resp.data.centers);\r\n          setLoading(false);\r\n          setlastRefreshTime(moment().format('LTS'));\r\n        })\r\n        .catch(e => {\r\n          alert(\"error:\", e);\r\n          setLoading(false);\r\n        })\r\n    }\r\n    else{\r\n      console.log(\"skipped api\")\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div>Select your district to see Covid vaccine slots</div>\r\n      <div className='distList'>\r\n        {\r\n          loadingDist === true ? 'Loading...'\r\n            : <>\r\n              {\r\n                districtList.length > 0 ?\r\n                  <div className=''>\r\n                    {districtList.map(districtItem => {\r\n                      return (\r\n                        <div className={districtItem.district_id === district ? 'chatItem selectedDist' : 'chatItem'} key={districtItem.district_id} onClick={() => setDistrict(districtItem.district_id)}>{districtItem.district_name}</div>\r\n                      )\r\n                    })}\r\n                  </div>\r\n                  : 'No Districts available'\r\n              }\r\n            </>\r\n        }\r\n      </div>\r\n      <div>Auto refreshes in every {INTERVAL / 1000} seconds. Last refresh:{lastRefreshTime}</div>\r\n      <div className='chatWindow'>\r\n        {\r\n          loading === true ? 'Loading...'\r\n            :\r\n            centerList.length > 0 ? centerList.map(center => {\r\n              return (\r\n                <div key={center.center_id} className='messageInBubble'>\r\n                  <div className='centerTitle'>\r\n                    <div className='centerName'>{center.name}-{center.block_name}</div>\r\n                    <div className={center.fee_type === 'Free' ? 'greenText centerFee' : 'redText centerFee'}>{center.fee_type}</div>\r\n                  </div>\r\n                  <div className='centerAddress'>{center.address} - {center.pincode}</div>\r\n                  {\r\n                    center.sessions.length > 0 && center.sessions.map(session => {\r\n                      return (\r\n                        <div key={session.session_id} className={session.available_capacity ? 'availableBG sessionContainer' : 'notAvailableBG sessionContainer'}>\r\n                          <div className='vaccineName'>{session.vaccine}</div>\r\n                          <div className='vaccineDate'>{session.date}</div>\r\n                          <div className='vaccineCapacity'>Age limit: {session.min_age_limit || 'NA'} to {session.max_age_limit || 'NA'}, Dose1: {session.available_capacity_dose1}, Dose2: {session.available_capacity_dose2}</div>\r\n                          <div className='slotContainer'>\r\n                            {\r\n                              session.slots.length > 0 && session.slots.map(slot => {\r\n                                return (\r\n                                  <div key={slot} className='slotTime'>{slot}</div>\r\n                                )\r\n                              })\r\n                            }\r\n                          </div>\r\n                        </div>\r\n                      )\r\n                    })\r\n                  }\r\n                </div>\r\n              )\r\n            })\r\n              : 'No Centers are available for the selected district. Refresh after some time.'\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}