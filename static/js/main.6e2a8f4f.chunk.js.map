{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["APIBASEURL","App","useState","districtList","setDistrictList","centerList","setCenterList","district","setDistrict","loading","setLoading","loadingDist","setLoadingDist","useEffect","axios","get","then","resp","data","districts","district_id","catch","e","alert","getData","dateInput","moment","format","centers","className","length","map","districtItem","onClick","district_name","center","name","block_name","fee_type","address","pincode","sessions","session","available_capacity","vaccine","date","available_capacity_dose1","available_capacity_dose2","slots","slot","session_id","center_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e2a8f4f.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nconst APIBASEURL = 'https://cdn-api.co-vin.in/api/v2';\nconst DISTRICTLISTENDPOINT = '/admin/location/districts/'\nconst KERALANUMBER = '17';\nconst DATABYDISTRICTENDPOINT = '/appointment/sessions/public/calendarByDistrict?&district_id='\n\nfunction App() {\n  const [districtList, setDistrictList] = useState([]);\n  const [centerList, setCenterList] = useState([]);\n  const [district, setDistrict] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [loadingDist, setLoadingDist] = useState(false);\n  const [timer, setTimer] = useState(0);\n  let timerObj;\n  useEffect(() => {\n    setLoadingDist(true);\n    axios.get(`${APIBASEURL}${DISTRICTLISTENDPOINT}${KERALANUMBER}`)\n      .then(resp => {\n        setDistrictList(resp.data.districts);\n        setLoadingDist(false);\n        setDistrict(resp.data.districts[0].district_id);\n      })\n      .catch(e => {\n        alert(\"error:\", e)\n        setLoadingDist(false);\n      })\n  }, []);\n  useEffect(() => {\n    getData();\n  }, [district]);\n  // useEffect(() => {\n  //   if (timer === 0) {\n  //     // console.log(\"timer is zero\")\n  //     // clearTimeout(timerObj);\n  //     getData();\n  //   }\n  //   if(timer > 0){\n  //     // timerObj = setTimeout(handleTimer, 1000);\n  //   }\n  // }, [timer]);\n  const getData = () => {\n    setLoading(true);\n    const dateInput = moment().format('DD-MM-YYYY');\n    district && axios.get(`${APIBASEURL}${DATABYDISTRICTENDPOINT}${district}&date=${dateInput}`)\n      .then(resp => {\n        setCenterList(resp.data.centers);\n        setLoading(false);\n        // setTimer(5000);\n        // handleTimer();\n      })\n      .catch(e => {\n        alert(\"error:\", e);\n        setLoading(false);\n      })\n  }\n  const handleTimer = () => {\n    setTimer(timer - 1000);\n  }\n  return (\n    <div className=\"App\">\n      <div>Select your district to see Covid vaccine slots</div>\n      <div className='distList'>\n        {\n          loadingDist === true ? 'Loading...'\n            : <>\n              {\n                districtList.length > 0 ?\n                  <div className=''>\n                    {districtList.map(districtItem => {\n                      return (\n                        <div className={districtItem.district_id === district ? 'chatItem selectedDist' : 'chatItem'} key={districtItem.district_id} onClick={() => setDistrict(districtItem.district_id)}>{districtItem.district_name}</div>\n                      )\n                    })}\n                  </div>\n                  : 'No Districts available'\n              }\n            </>\n        }\n      </div>\n      {/* <div>Data will refresh in {timer / 1000} seconds.</div> */}\n      <div className='chatWindow'>\n        {\n          loading === true ? 'Loading...'\n            :\n            centerList.length > 0 ? centerList.map(center => {\n              return (\n                <div key={center.center_id} className='messageInBubble'>\n                  <div className='centerTitle'>\n                  <div className='centerName'>{center.name}-{center.block_name}</div>\n                  <div className='centerFee'>{center.fee_type}</div>\n                  </div>\n                  <div className='centerAddress'>{center.address} - {center.pincode}</div>\n                  {\n                    center.sessions.length > 0 && center.sessions.map(session => {\n                      return (\n                        <div key={session.session_id} className={session.available_capacity ? 'availableBG sessionContainer' : 'notAvailableBG sessionContainer'}>\n                          <div className='vaccineName'>{session.vaccine}</div>\n                          <div className='vaccineDate'>{session.date}</div>\n                          <div className='vaccineCapacity'>Available capacity: {session.available_capacity}, Dose1: {session.available_capacity_dose1}, Dose2: {session.available_capacity_dose2}</div>\n                          <div className='slotContainer'>\n                            {\n                              session.slots.map(slot => {\n                                return (\n                                  <div key={slot} className='slotTime'>{slot}</div>\n                                )\n                              })\n                            }\n                          </div>\n                        </div>\n                      )\n                    })\n                  }\n                </div>\n              )\n            })\n              : 'No Centers are available for the selected district. Refresh after some time.'\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}